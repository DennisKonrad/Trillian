#!/bin/bash

#Copyright 2016 ShapeBlue
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

MARVINDIR="/marvin"
LOGDIR="/marvin/MarvinLogs"
TMP_JSON_DIR="/marvin/json_results"
mkdir $TMP_JSON_DIR

CFG_FILE="$MARVINDIR/{{ env_name_clean }}-advanced-cfg"
TEST_DATA_FILE="$MARVINDIR/test_data.py"
EXTRA_ENV_DATA_FILE="$MARVINDIR/additional_test_data.json"
TMP_ENV_META_DATA="$TMP_JSON_DIR/additional_test_data.json"
ENV_TEST_DATA="env_test_data.json"
ENV_EXTRA_DATA="env_extra_data.json"

echo " -- Create testrun uuid"
TESTRUN_UUID=$(uuidgen -r)

TESTOUTPUT=""
echo "" > $TMP_JSON_DIR/nose_test_ouput.json
for file in $TMP_JSON_DIR/test_*.py.json; do
  echo "processing $file"
  cat $file | jq 'del(.stats) | .results[]' > $TMP_JSON_DIR/tmpfile
  cat $TMP_JSON_DIR/nose_test_ouput.json |  jq .[] | jq -s --slurpfile newfile $TMP_JSON_DIR/tmpfile '. + $newfile' > $TMP_JSON_DIR/nose_test_ouput.json2
  mv $TMP_JSON_DIR/nose_test_ouput.json2 $TMP_JSON_DIR/nose_test_ouput.json
done
rm -f $TMP_JSON_DIR/tmpfile

echo " ==== PROCESS ENV DEFINITION FILE (ADVANCED-CFG) ==== "


echo " -- convert numbers to strings env cfg data"
cp $CFG_FILE $TMP_JSON_DIR/env_cfg_file.json
NUMBERS=(`grep '\".*\": [0-9].*' $TMP_JSON_DIR/env_cfg_file.json | sed 's/.*: //g' | sed 's/,//g'`)
UNIQUE=(`for i in ${NUMBERS[@]}; do echo $i; done | sort -u | tr " " "\n"`)
for (( i = 0; i < ${#UNIQUE[@]}; i++ )); do
  sed -i "s/: ${UNIQUE[$i]}$/: \"${UNIQUE[$i]}\"/g" $TMP_JSON_DIR/env_cfg_file.json
  sed -i "s/: ${UNIQUE[$i]},/: \"${UNIQUE[$i]}\",/g" $TMP_JSON_DIR/env_cfg_file.json
done

echo " -- get additional data for env cfg data"
cloudmonkey set display json
export TERM=vt100
HV=$(cloudmonkey list hosts | jq -r '.host[] | .hypervisor //empty' | head -1)
HV_JSON=`cat $TMP_ENV_META_DATA | jq -r '.[] | .marvin_hypervisor'`

if [[ "${HV,,}" == "kvm" ]]; then
  HOST1DATA=`cat $TMP_JSON_DIR/env_cfg_file.json | jq '.zones[] | .pods[] | .clusters[]| select(.hypervisor=="kvm") | .hosts[0]'`
  echo "HOST1DATA is " $HOST1DATA
  HOST1ADDR=`echo $HOST1DATA | jq -r '.url' | sed 's/http:\/\///g'`
  HOST1USER=`echo $HOST1DATA | jq -r '.username'`
  HOST1PASS=`echo $HOST1DATA | jq -r '.password'`
fi

echo " -- Redact sensitive data from cfg data"
sed -i 's/\"password\": \".*\"/\"password\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json
sed -i 's/\"passwd\": \".*\"/\"passwd\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json
sed -i 's/\"username\": \".*\"/\"username\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json
sed -i 's/\"mgtSvrIp\": \".*\"/\"mgtSvrIp\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json
sed -i 's/\"user\": \".*\"/\"user\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json



echo " -- get additional data for env cfg data"

cp $EXTRA_ENV_DATA_FILE $TMP_ENV_META_DATA
cloudmonkey set display json
export TERM=vt100
HV=$(cloudmonkey list hosts | jq -r '.host[] | .hypervisor //empty' | head -1)
HV_JSON=`cat $TMP_ENV_META_DATA | jq -r '.[] | .marvin_hypervisor'`

if [[ "${HV,,}" == "${HV_JSON,,}" ]]; then
  if [[ "${HV,,}" == "kvm" ]]; then
     HOSTYPEDATA=`sshpass -p "$HOST1PASS" ssh -o StrictHostKeyChecking=no $HOST1USER@$HOST1ADDR "cat /etc/*-release"`
     echo HOSTYPEDATA $HOSTYPEDATA
     if [[ -z `echo $HOSTYPEDATA | grep 'CentOS release 6'` ]]; then
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"CentOS 6\"/g" $TMP_ENV_META_DATA
     elif [[ -z `echo $HOSTYPEDATA | grep 'CentOS Linux release 7'` ]]; then
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"CentOS 7\"/g" $TMP_ENV_META_DATA
     elif [[ -z `echo $HOSTYPEDATA | grep 'Ubuntu 16.04'` ]]; then
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Ubuntu 16.04\"/g" $TMP_ENV_META_DATA
     elif [[ -z `echo $HOSTYPEDATA | grep 'Ubuntu 14.04'` ]]; then
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Ubuntu 14.04\"/g" $TMP_ENV_META_DATA
     else
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Unknown\"/g" $TMP_ENV_META_DATA
     fi
  else
    HV_VER=$(cloudmonkey list hosts | jq -r '.host[] | .hypervisorversion //empty' | head -1)
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"$HV_VER\"/g" $TMP_ENV_META_DATA
  fi
fi

echo " -- Add date to additional test run data"
DATEVAR=$(date)
sed -i "s/\"testrun_date\": \".*\"/\"testrun_date\": \"$DATEVAR\"/g" $TMP_ENV_META_DATA

echo " -- URL Encode test_data"
TEST_DATA=`cat $TEST_DATA_FILE`
TESTDATAPY=`python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])" "$TEST_DATA"`


echo " ===== create json file ======"


echo "{\"testrun\":
{\"testrun_uuid\": \"$TESTRUN_UUID\",
\"test_metadata\":`cat $TMP_ENV_META_DATA`,
\"results\":`cat $TMP_JSON_DIR/nose_test_ouput.json`,
\"env_data\":`cat $TMP_JSON_DIR/env_cfg_file.json`,
\"test_data_py_contents\":\"$TESTDATAPY\"}}" > $MARVINDIR/test_run.json

cd $MARVINDIR && tar -czf ./{{ env_name_clean }}_json.tar.gz test_run.json 