#!/bin/bash

#Copyright 2016 ShapeBlue
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

MARVINDIR="/marvin"
LOGDIR="/marvin/MarvinLogs"
TMP_JSON_DIR="/marvin/json_results"


CFG_FILE="$MARVINDIR/{{ env_name_clean }}-advanced-cfg"
MARVINDIR="/marvin"
LOGDIR="/marvin/MarvinLogs"
TMP_JSON_DIR="/marvin/json_results"

TEST_DATA_FILE="$MARVINDIR/test_data.py"
EXTRA_ENV_DATA_FILE="$MARVINDIR/additional_test_data.json"
TMP_ENV_DATA_FILE="$TMP_JSON_DIR/env_extra_data.json"

ENV_TEST_DATA="env_test_data.json"

echo " -- Create testrun uuid"
TESTRUN_UUID=$(uuidgen -r)

echo " ==== PROCESS TEST RESULTS ==== "
echo " -- Inject UUID and add testrun json element parent into test results"

for file in $LOGDIR/test_*.py.json; do
  cat $file | jq 'del(.stats)' | jq --arg testrunuuid $TESTRUN_UUID '. + {testrun_uuid: $testrunuuid}' > $TMP_JSON_DIR/$(basename $file)
  sed -i '0,/{/s/{/{\"testruns\":{/'  $TMP_JSON_DIR/$(basename $file)
  echo '}' >> $TMP_JSON_DIR/$(basename $file)
done

echo " ==== PROCESS ENV DEFINITION FILE (ADVANCED-CFG) ==== "
echo "  --  Inject UUID into cfg data"
cat $MARVINDIR/$CFG_FILE | jq . | jq --arg testrunuuid $TESTRUN_UUID '. + {testrun_uuid: $testrunuuid}' > $TMP_JSON_DIR/env_cfg_file.json

echo " -- convert numbers to strings env cfg data"
NUMBERS=(`grep '\".*\": [0-9].*' $TMP_JSON_DIR/env_cfg_file.json | sed 's/.*: //g' | sed 's/,//g'`)
UNIQUE=(`for i in ${NUMBERS[@]}; do echo $i; done | sort -u | tr " " "\n"`)
{% raw %}for (( i = 0; i < ${#UNIQUE[@]}; i++ )); do{% endraw %}

  sed -i "s/: ${UNIQUE[$i]}$/: \"${UNIQUE[$i]}\"/g" $TMP_JSON_DIR/env_cfg_file.json
  sed -i "s/: ${UNIQUE[$i]},/: \"${UNIQUE[$i]}\",/g" $TMP_JSON_DIR/env_cfg_file.json
done

cloudmonkey set display json
export TERM=vt100
HV=$(cloudmonkey list hosts | jq -r '.host[] | .hypervisor //empty' | head -1)


if [[ "${HV,,}" == "kvm" ]]; then
  HOST1DATA=`cat $TMP_JSON_DIR/env_cfg_file.json | jq '.zones[] | .pods[] | .clusters[]| select(.hypervisor=="kvm") | .hosts[0]'`
  HOST1ADDR=`echo $HOST1DATA | jq -r '.url' | sed 's/http:\/\///g'`
  HOST1USER=`echo $HOST1DATA | jq -r '.username'`
  HOST1PASS=`echo $HOST1DATA | jq -r '.password'`
fi


echo " -- Redact sensitive data from cfg data"
sed -i 's/\"password\": \".*\"/\"password\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json
sed -i 's/\"passwd\": \".*\"/\"passwd\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json
sed -i 's/\"username\": \".*\"/\"username\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json
sed -i 's/\"mgtSvrIp\": \".*\"/\"mgtSvrIp\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json
sed -i 's/\"user\": \".*\"/\"user\": \"------"/g' $TMP_JSON_DIR/env_cfg_file.json


echo " ==== PROCESS TEST INPUTS FILE (TESTDATA.PY) ==== "

echo " -- URL Encode test_data"
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1])"'
TEST_DATA=`cat /marvin/test_data.py`
echo "{\"test_data.py_contents\": \"`urlencode "$TEST_DATA"`\"}"  > $TMP_JSON_DIR/test_data_file.clean

echo " -- Inject UUID into test cfg data"
cat $TMP_JSON_DIR/test_data_file.clean | jq . | jq --arg testrunuuid $TESTRUN_UUID '. + {testrun_uuid: $testrunuuid}' > $TMP_JSON_DIR/env_test_data.json
rm -f $TMP_JSON_DIR/test_data_file.clean

echo " ==== PROCESS ADDITIONAL TEST RUN DATA ==== "

echo " -- Inject UUID into env data"
cat $EXTRA_ENV_DATA_FILE | jq . | jq --arg testrunuuid $TESTRUN_UUID '. + {testrun_uuid: $testrunuuid}' > $TMP_ENV_DATA_FILE
HV_JSON=`cat $TMP_ENV_DATA_FILE | jq -r '.marvin_hypervisor'`

echo " -- get additional data for env cfg data"


if [[ "${HV,,}" == "${HV_JSON,,}" ]]; then
  if [[ "${HV,,}" == "kvm" ]]; then
     HOSTYPEDATA=`sshpass -p "$HOST1PASS" ssh -o StrictHostKeyChecking=no $HOST1USER@$HOST1ADDR "cat /etc/*-release"`
     if [[ -z `echo $HOSTYPEDATA | grep 'CentOS release 6'` ]]; then
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"CentOS 6\"/g" $TMP_ENV_DATA_FILE
     elif [[ -z `echo $HOSTYPEDATA | grep 'CentOS Linux release 7'` ]]; then
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"CentOS 7\"/g" $TMP_ENV_DATA_FILE
     elif [[ -z `echo $HOSTYPEDATA | grep 'Ubuntu 16.04'` ]]; then
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Ubuntu 16.04\"/g" $TMP_ENV_DATA_FILE
     elif [[ -z `echo $HOSTYPEDATA | grep 'Ubuntu 14.04'` ]]; then
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Ubuntu 14.04\"/g" $TMP_ENV_DATA_FILE
     else
       sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"Unknown\"/g" $TMP_ENV_DATA_FILE
     fi
  else
    HV_VER=$(cloudmonkey list hosts | jq -r '.host[] | .hypervisorversion //empty' | head -1)
    sed -i "s/\"hypervisor_version\": \".*\"/\"hypervisor_version\": \"$HV_VER\"/g" $TMP_ENV_DATA_FILE
  fi
fi

echo " -- Add date to additional test run data"
DATEVAR=$(date)
sed -i "s/\"testrun_date\": \".*\"/\"testrun_date\": \"$DATEVAR\"/g" $TMP_ENV_DATA_FILE


cd $TMP_JSON_DIR; tar -czf $MARVINDIR/{{ env_name_clean }}_json.tar.gz *.json 

