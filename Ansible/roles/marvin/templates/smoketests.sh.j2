#!/bin/bash
#Copyright 2016 ShapeBlue
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

set +e # stop erroneous failures reported by Jenkins

TESTTYPE="Smoke tests"
LOGDIR=/marvin/MarvinLogs
TESTDIR="/marvin/tests/smoke"
TMP_JSON_DIR="/marvin/json_results/"
mkdir -p $LOGDIR
echo "$(date --iso-8601=minutes)" > /marvin/testrunstartdate
export SLACK_CLI_TOKEN="{{ slack_token }}"
if [ -e /marvin/joburl ]; then
  jenkinslink="`cat /marvin/jenkins_build_url`console/"
else
  jenkinslink=""
fi

rm -f /marvin/smoketests-summary.txt
rm -f $TESTDIR/test_*.pyc
rm -f /usr/lib/python2.7/site-packages/marvin/*pyc
rm -f /usr/lib/python2.7/site-packages/marvin/config/*pyc
rm -f /usr/lib/python2.7/site-packages/marvin/lib/*pyc

cleanup() {
    cloudmonkey set asyncblock false
    cloudmonkey set display default
    # TODO: destroy accounts, domains, templates
    # Destroy vms
    for vmid in $(cloudmonkey list virtualmachines listall=true filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey destroy virtualmachine id=$vmid expunge=true || true
    done
    # Destroy routers
    for rid in $(cloudmonkey list routers listall=true filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey destroy router id=$rid || true
    done
    # Destroy networks
    for netid in $(cloudmonkey list networks listall=true filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey delete network id=$netid || true
    done
    # Destroy vpcs
    for vid in $(cloudmonkey list vpcs listall=true filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey delete vpc id=$vid || true
    done
    # Destroy alerts
    for id in $(cloudmonkey list alerts listall=true keyword=auth-error filter=id | grep '^id' | awk '{print $3}'); do
        cloudmonkey delete alerts ids=$id || true
    done
}

runtest() {
    file=$1
    rm -fr $LOGDIR/$(basename $file).xml
    TRIMFILE=$(echo $(basename $file) | sed 's/.py$//g')
    OLDRESULT=$(ls $LOGDIR | grep -E $TRIMFILE'_[a-zA-Z0-9]{6}$' | head -1)
    if [ ! -z "${OLDRESULT// }" ]; then
        echo "Found old test results, removing:" $LOGDIR/$OLDRESULT
        rm -fr $LOGDIR/$OLDRESULT
    fi
    nosetests --with-xunit --xunit-file=$LOGDIR/$(basename $file).xml --with-json --json-file=$LOGDIR/$(basename $file).json --with-marvin --marvin-config=/marvin/{{ env_name_clean }}-advanced-cfg --hypervisor={{ env_hv }} -s -a tags={{ env_zonetype | lower }}{% if marvin_test_categories is defined %}{% for category in marvin_test_categories %},{{ category }}{% endfor %}{% endif %} $file
    cleanup || true
}

launchtest() {
    file=$1
    runtest $file
    # Run tests once again on error or failure
    python /marvin/tools/xunit-reader.py $LOGDIR/$(basename $file).xml | grep -e Failure -e Error && runtest $file && echo "Intermittent failure detected: $file" >> /marvin/smoketests-summary.txt
}
slackmsg() {
   messagebody=$1
   messagecolor=$2
   slack chat send \
  --channel "#testing" \
  --color $messagecolor \
  --text "$messagebody" \
  --title "$TESTTYPE update for {{ env_name_clean }}" \
  --title-link "$jenkinslink"
}

NUMTESTS=`find /marvin/tests/smoke/test_*.py | wc -l`
run_start_time="$(date -u +%s)"
counter=1
PASSES=0
# FIXME: make separate list of `dangerous` tests and those that may be run in parallel
FILES=$(ls $TESTDIR/test_*py | grep -v test_host_maintenance | grep -v test_hostha_kvm)
if [ -f /$TESTDIR/test_host_maintenance.py ]; then
    FILES="$FILES $TESTDIR/test_host_maintenance.py"
fi
if [ -f $TESTDIR/test_hostha_kvm.py ]; then
    FILES="$FILES $TESTDIR/test_hostha_kvm.py"
fi
for file in $FILES; do
    TESTFILENAME="$(basename $file)"
    echo -e "\e[92m ---->  Starting $TESTFILENAME on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }} in: {{ env_name_clean }}\e[0m"
    {% if use_hipchat %}    hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "Starting <b>$(basename $file)</b> on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }} in: <br><b>{{ env_name_clean }}</b> - test ($counter of $NUMTESTS)"
    {% endif %}
    {% if use_slack %}    slackmsg "Starting $TESTFILENAME on {{ hostvars[groups['marvin_host'][0]]['ansible_ssh_host'] }}.\nTest ($counter of $NUMTESTS) " "#808080"
    {% endif %}
    start_time="$(date -u +%s)"
    launchtest $file
    end_time="$(date -u +%s)"
    elapsed="$(($end_time-$start_time))"
    all_tests_elapsed="$((($end_time-$run_start_time)/1440))"
    tests_left="$(($NUMTESTS-$counter))"
    echo "$(basename $file): $elapsed seconds" >> $LOGDIR/tests-time.txt

    LASTUPDATEDIR=`ls $LOGDIR/*/ -td | head -n 1`
    if [[ -s ${LASTUPDATEDIR}failed_plus_exceptions.txt ]]; then
      echo "test $(basename $file) in {{ env_name_clean }} looks to have errors"
      {% if use_hipchat %}      hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "test $TESTFILENAME in {{ env_name_clean }} looks to have <span style="color:#FF0000">errors</span>. $PASSES of $counter good so far.<br>Tests have taken $all_tests_elapsed hours so far. $tests_left tests to go."
{% endif %}
      {% if use_slack %}      slackmsg "Test $TESTFILENAME looks to have *errors*.\n$PASSES of $counter good so far.\nTests have taken $all_tests_elapsed hours so far. $tests_left tests to go." "warning"
{% endif %}
    else
      PASSES=$((PASSES+1))
      echo "test $TESTFILENAME in {{ env_name_clean }} looks OK"
      {% if use_hipchat %}       hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --colour "gray" --message "test $TESTFILENAME in {{ env_name_clean }} looks <span style="color:#2F962F">OK</span>. $PASSES of $counter good so far.<br>Tests have taken $all_tests_elapsed hours so far. $tests_left tests to go."
{% endif %}
      {% if use_slack %}      slackmsg "Test $TESTFILENAME looks *OK*.\n$PASSES of $counter good so far.\nTests have taken $all_tests_elapsed hours so far. $tests_left tests to go." "good"
{% endif %}
    fi
    counter=$((counter+1))

done

GOOD=0
BAD=0
for file in $LOGDIR/*.xml; do
  if grep --q 'errors="0" failures="0"' ${file}
    then
      GOOD=$((GOOD+1))
    else
      BAD=$((BAD+1))
  fi
done
echo "Test completed. $GOOD look ok, $BAD have errors"
{% if use_hipchat %}hipchat --action sendNotification --room "Marvin Notifications" --messageFormat "html" --message "$$TESTTYPE for <b>{{ env_name_clean }}</b> completed. <br><b>$GOOD</b> look ok, <b>$BAD</b> have errors" --colour "green" --notify
{% endif %}
{% if use_slack %}slackmsg "$TESTTYPE completed.\n*$GOOD* looks ok, *$BAD* have errors" "good"
{% endif %}

echo "Smoke tests completed. $GOOD look OK, $BAD have error(s)" >> /marvin/smoketests-summary.txt
echo "$GOOD look ok, $BAD have errors" > /marvin/test-summary.txt
echo "Only failed tests results shown below:" >> /marvin/smoketests-summary.txt
echo "" >> /marvin/smoketests-summary.txt
python /marvin/tools/xunit-reader.py $LOGDIR/ >> /marvin/smoketests-summary.txt
cat /marvin/smoketests-summary.txt

bash /marvin/process_json_results.sh
