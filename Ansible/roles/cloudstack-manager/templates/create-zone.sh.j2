#!/bin/bash -e

#Copyright 2016 ShapeBlue
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.


# force the user to confirm

cli=cloudmonkey

{% for setting in global_settings %}
$cli api updateConfiguration name=\"{{ setting.name }}\" value='{{ setting.value }}'
{% endfor %} 

echo "Creating zone {{ zone.name }}"
$cli create zone name={{ zone.name }} dns1={{ zone.dns1 }} internaldns1={{ zone.internal_dns1 }} internaldns2={{ zone.internal_dns2 }} localstorageenabled={{ zone.local_storage_enabled }} securitygroupenabled={{ zone.security_group_enabled }} networktype={{ zone.network_type }} allocationstate={{ zone.allocation_state }} domain={{ zone.domain }}

zone_id=`$cli list zones name={{ zone.name }} | grep ^id\ = | awk '{print $3}'`
{% for network in physical_networks %}
echo "Creating phsyical network: {{ network.name }}"
$cli create physicalnetwork name={{ network.name }}  zoneid=$zone_id isolationmethods={{ network.isolation_type }}

echo "Getting the network id"
{{ network.name }}_id=`$cli list physicalnetworks name={{ network.name }} zoneid=$zone_id | grep ^id\ = | awk '{print $3}'`

echo "Adding traffic type to physical network"
$cli add traffictype traffictype={{ network.traffic_type }} physicalnetworkid=${{ network.name }}_id kvmnetworklabel={{ network.kvm_label }} xennetworklabel={{ network.xen_label }}

echo "Enabling physical network"
$cli update physicalnetwork state=Enabled id=${{ network.name }}_id

{% if network.virtual_router %}
echo "Getting the Network Service Provider - Virtual Router"
nsp_id=`$cli list networkserviceproviders name=VirtualRouter physicalnetworkid=${{ network.name }}_id | grep ^id\ = | awk '{print $3}'`

echo "Getting the VirtualRouterElements"
vre_id=`$cli list virtualrouterelements nspid=$nsp_id | grep ^id\ = | awk '{print $3}'`

echo "Enabling the VirtualRouterElement"
$cli api configureVirtualRouterElement enabled=true id=$vre_id

echo "Enabling the Network Service Provider - Virtual Router"
$cli update networkserviceprovider state=Enabled id=$nsp_id

echo "Getting the Network Service Provider - Internal Load Balancer id"
nsp_sg_id=`$cli list networkserviceproviders name=Internallbvm physicalnetworkid=${{ network.name }}_id | grep ^id\ = | awk '{print $3}'`

echo "Enabling the Network Service Provider - Internal Load Balancer"
$cli update networkserviceprovider state=Enabled id=$nsp_sg_id
{% endif %}

{% endfor %}

# Assumption: there's only one domain
dom_id=`$cli list domains | grep ^id\ = | awk '{print $3}'`
netoff_id=`$cli list networkofferings name=DefaultSharedNetworkOfferingWithSGService | grep ^id\ = | awk '{print $3}'`

#{% for account in accounts %}
#echo "Creating {{ account.username }} account"
#$cli create account domainid=$dom_id firstname={{ account.firstname }} lastname={{ account.lastname }} username={{ account.username }} password={{ account.password }} email={{ account.email }} accounttype={{ account.type }}
#{% endfor %}

#{% endfor %}

{% for pod in pods %}
echo "Creating pod: {{ pod.name }}"
$cli create pod name={{ pod.name }} zoneid=$zone_id gateway={{ pod.gateway }} netmask={{ pod.netmask }} startip={{ pod.startip }} endip={{ pod.endip }}

echo "Getting pod id"
{{ pod.name }}_id=`$cli list pods name={{ pod.name }} | grep ^id\ = | awk '{print $3}'`

#echo "Creating storage network ip range"
#$cli create storagenetworkiprange zoneid=$zone_id podid=${{ pod.name }}_id gateway={{ pod.storage_gateway }} netmask={{ pod.storage_netmask }} startip={{ pod.storage_startip }} endip={{ pod.storage_endip }}


{% for cluster in pod.clusters %}
echo "Adding cluster {{ cluster.name }}"
$cli add cluster zoneid=$zone_id hypervisor={{ cluster.hypervisor }} clustertype=CloudManaged podid=${{ pod.name }}_id clustername={{ cluster.name }}

{{ cluster.name}}_id=`$cli list clusters zoneid=$zone_id name={{ cluster.name }} | grep ^id\ = | awk '{print $3}'`

{% for host in cluster.hosts %}
echo "Adding host to cluster"
$cli add host zoneid=$zone_id podid=${{ pod.name }}_id clusterid=${{ cluster.name }}_id hypervisor={{ cluster.hypervisor }} username={{ host.username }} password={{ host.password }} url={{ host.url }}
{% endfor %}

#{% for storage in cluster.primary_storage %}
#echo "Adding primary shared storage {{ storage.name }}"
#$cli create storagepool zoneid=$zone_id podid=${{ pod.name }}_id clusterid=${{ cluster.name }}_id name={{ storage.name }} url={{ storage.url }}
#{% endfor %}

{% endfor %}
{% endfor %}

echo "Adding secondary storage"
{% for secondary in secondary_storage %}
$cli add secondarystorage zoneid=$zone_id url={{ secondary.url }}
{% endfor %}

echo "Creating service offerings"
{% for offering in service_offerings %}
$cli create serviceoffering name={{ offering.name }} displaytext=\"{{ offering.display_text }}\"  cpunumber={{ offering.cpu_number }} cpuspeed={{ offering.cpu_speed }} limitcpuuse={{ offering.limit_cpu_use }} memory={{ offering.memory }} offerha={{ offering.offer_ha }} storagetype={{ offering.storage_type }}
{% endfor %}

echo "Updating db entries"
{% for setting in mysql_settings %}
mysql -u {{ db_username }} -p{{ db_password }} -h {{ db_hostname }} cloud -e "{{ setting }}"
{% endfor %}

echo "Please restart cloudstack manager if global settings have been updated before enabling zone"

